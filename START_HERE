# \# üöÄ FastPing Service - Complete Operations Manual

# 

# \## üìã Quick Reference

# 

# \*\*Service URL:\*\* `http://161.35.248.233`  

# \*\*Admin Dashboard:\*\* `http://161.35.248.233/admin/stats`  

# \*\*Customer Dashboard:\*\* `http://161.35.248.233/dashboard`  

# \*\*API Base:\*\* `http://161.35.248.233/api/v1/`  

# 

# ---

# 

# \## üîß Service Management

# 

# \### Start/Stop/Restart Service

# ```bash

# \# SSH into server

# ssh wofl@161.35.248.233

# cd ~/fastping.it.com/fastping-it

# 

# \# Start services

# docker-compose up -d

# 

# \# Stop services

# docker-compose down

# 

# \# Restart specific service

# docker-compose restart fastping

# 

# \# View service status

# docker-compose ps

# 

# \# View logs

# docker-compose logs fastping

# docker-compose logs fastping --tail 50

# ```

# 

# \### Emergency Service Reset

# ```bash

# \# Nuclear restart (if things go wrong)

# docker-compose down

# docker system prune -f

# docker volume prune -f

# sudo systemctl restart docker

# docker-compose up -d

# ```

# 

# \### Update Code

# ```bash

# \# From local machine - upload new code

# scp "D:/code/fastping/fastping-it/ultimate\_fastping\_app.py" wofl@161.35.248.233:/home/wofl/fastping.it.com/fastping-it/

# 

# \# On server - rebuild and restart

# ssh wofl@161.35.248.233

# cd ~/fastping.it.com/fastping-it

# docker-compose build --no-cache

# docker-compose up -d

# ```

# 

# ---

# 

# \## üë• Customer Management

# 

# \### Create New Customer

# ```bash

# \# Create customer with automatic IP allocation

# curl -X POST http://localhost:9876/admin/create\_test\_customer \\

# &nbsp; -H "Content-Type: application/json" \\

# &nbsp; -d '{"email":"customer@example.com","plan\_type":"enterprise"}'

# 

# \# Response includes: customer\_id, api\_key, allocated\_ips

# ```

# 

# \### View All Customers

# ```bash

# \# Web interface

# curl http://localhost:9876/admin/stats

# 

# \# Via database query

# docker-compose exec fastping python -c "

# import sys

# sys.path.append('/app')

# from ultimate\_fastping\_app import \*

# 

# with app.app\_context():

# &nbsp;   customers = Customer.query.all()

# &nbsp;   for c in customers:

# &nbsp;       print(f'ID: {c.id} | Email: {c.email} | Plan: {c.plan\_type} | API Key: {c.api\_key}')

# "

# ```

# 

# \### Create Dashboard Login for Customer

# ```bash

# \# Give existing customer dashboard access

# curl -X POST http://localhost:9876/admin/create\_dashboard\_account \\

# &nbsp; -d "customer\_id=CUSTOMER\_ID\_HERE\&email=customer@example.com\&password=securepassword"

# ```

# 

# ---

# 

# \## üîê IP Whitelisting

# 

# \### Add IP to Whitelist (Automatic via Customer Creation)

# ```bash

# \# When you create a customer, IP is automatically allocated and whitelisted

# curl -X POST http://localhost:9876/admin/create\_test\_customer \\

# &nbsp; -H "Content-Type: application/json" \\

# &nbsp; -d '{"email":"user@example.com","plan\_type":"enterprise"}'

# ```

# 

# \### Manually Add IP to Resource Pool

# ```bash

# \# Add new IP to available pool

# docker-compose exec fastping python -c "

# import sys

# sys.path.append('/app')

# from ultimate\_fastping\_app import \*

# import uuid

# 

# with app.app\_context():

# &nbsp;   new\_ip = ResourcePool(

# &nbsp;       id='manual\_' + str(uuid.uuid4()),

# &nbsp;       ip\_address='YOUR\_NEW\_IP\_HERE',

# &nbsp;       resource\_type='ip\_only',

# &nbsp;       reserved\_for\_plan='enterprise'

# &nbsp;   )

# &nbsp;   db.session.add(new\_ip)

# &nbsp;   db.session.commit()

# &nbsp;   print('‚úÖ Added IP to pool!')

# "

# ```

# 

# \### Check IP Whitelist Status

# ```bash

# \# Check if IP is whitelisted

# curl http://161.35.248.233/proxy-test

# \# Success = whitelisted, "Access denied" = not whitelisted

# 

# \# View all allocated IPs

# docker-compose exec fastping python -c "

# import sys

# sys.path.append('/app')

# from ultimate\_fastping\_app import \*

# 

# with app.app\_context():

# &nbsp;   allocations = ResourceAllocation.query.filter\_by(is\_active=True).all()

# &nbsp;   for alloc in allocations:

# &nbsp;       customer = Customer.query.get(alloc.customer\_id)

# &nbsp;       print(f'IP: {alloc.ip\_address} | Customer: {customer.email if customer else \\"Unknown\\"} | Plan: {customer.plan\_type if customer else \\"Unknown\\"}')

# "

# ```

# 

# ---

# 

# \## üìä Dashboard Access

# 

# \### Admin Dashboard

# ```bash

# \# View admin statistics

# curl http://161.35.248.233/admin/stats

# 

# \# Or open in browser:

# \# http://161.35.248.233/admin/stats

# ```

# 

# \### Customer Dashboard

# ```bash

# \# Login page

# curl http://161.35.248.233/dashboard/login

# 

# \# Direct browser access:

# \# URL: http://161.35.248.233/dashboard/login

# \# Use customer email + password set via create\_dashboard\_account

# ```

# 

# ---

# 

# \## üîå API Usage

# 

# \### Basic API Ping

# ```bash

# \# Using API key authentication

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/ping

# 

# \# Different formats

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/ping?format=text

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/ping?format=xml

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/ping?format=html

# ```

# 

# \### Proxy Detection API

# ```bash

# \# Full proxy analysis

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/proxy-test

# 

# \# Different formats

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/proxy-test?format=text

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/proxy-test?format=xml

# ```

# 

# \### Whitelisted IP Endpoints (No API key needed)

# ```bash

# \# Basic proxy test (requires whitelisted IP)

# curl http://161.35.248.233/proxy-test

# 

# \# Format-specific endpoints

# curl http://161.35.248.233/text

# curl http://161.35.248.233/json

# curl http://161.35.248.233/xml

# curl http://161.35.248.233/html

# ```

# 

# ---

# 

# \## üõ†Ô∏è Troubleshooting

# 

# \### Check Service Health

# ```bash

# \# Health check

# curl http://161.35.248.233/health

# 

# \# Detailed status

# docker-compose ps

# docker-compose logs fastping --tail 20

# 

# \# Check if ports are listening

# netstat -tulpn | grep 9876

# netstat -tulpn | grep 80

# ```

# 

# \### Common Issues \& Fixes

# 

# \#### "Access denied" for proxy-test

# ```bash

# \# Your IP isn't whitelisted - create customer to get whitelisted

# curl -X POST http://localhost:9876/admin/create\_test\_customer \\

# &nbsp; -H "Content-Type: application/json" \\

# &nbsp; -d '{"email":"your@email.com","plan\_type":"enterprise"}'

# ```

# 

# \#### 404 errors

# ```bash

# \# Check if FastPing is running

# curl http://localhost:9876/health

# 

# \# If not working, restart service

# docker-compose restart fastping

# ```

# 

# \#### "Invalid API key"

# ```bash

# \# Get correct API key from customer creation response

# \# Or check admin dashboard: http://161.35.248.233/admin/stats

# ```

# 

# \#### Dashboard login fails

# ```bash

# \# Ensure dashboard account exists

# curl -X POST http://localhost:9876/admin/create\_dashboard\_account \\

# &nbsp; -d "customer\_id=CUSTOMER\_ID\&email=user@example.com\&password=newpassword"

# ```

# 

# \#### Container won't start

# ```bash

# \# Check Docker logs

# docker-compose logs fastping

# 

# \# Force rebuild

# docker-compose build --no-cache

# docker-compose up -d

# 

# \# Nuclear option

# docker-compose down

# docker system prune -f

# docker-compose up -d

# ```

# 

# ---

# 

# \## üìà Monitoring \& Maintenance

# 

# \### View Usage Statistics

# ```bash

# \# Admin dashboard stats

# curl http://161.35.248.233/admin/stats

# 

# \# Database query for detailed stats

# docker-compose exec fastping python -c "

# import sys

# sys.path.append('/app')

# from ultimate\_fastping\_app import \*

# 

# with app.app\_context():

# &nbsp;   total\_customers = Customer.query.count()

# &nbsp;   total\_requests = UsageLog.query.count()

# &nbsp;   active\_allocations = ResourceAllocation.query.filter\_by(is\_active=True).count()

# &nbsp;   

# &nbsp;   print(f'Total Customers: {total\_customers}')

# &nbsp;   print(f'Total Requests: {total\_requests}')

# &nbsp;   print(f'Active IP Allocations: {active\_allocations}')

# "

# ```

# 

# \### Performance Testing

# ```bash

# \# Install hey load testing tool

# curl -L https://hey-release.s3.us-east-2.amazonaws.com/hey\_linux\_amd64 -o hey

# chmod +x hey

# sudo mv hey /usr/local/bin/

# 

# \# Test API performance

# hey -n 100 -c 10 -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/ping

# 

# \# Test whitelisted endpoint performance

# hey -n 100 -c 10 http://161.35.248.233/proxy-test

# ```

# 

# \### Database Backup

# ```bash

# \# Backup SQLite database

# docker-compose exec fastping cp /app/fastping.db /app/fastping\_backup\_$(date +%Y%m%d).db

# 

# \# Copy backup to host

# docker cp fastping-it\_fastping\_1:/app/fastping\_backup\_$(date +%Y%m%d).db ./

# ```

# 

# ---

# 

# \## üîë Important File Locations

# 

# \### On Server

# \- \*\*Project Directory:\*\* `/home/wofl/fastping.it.com/fastping-it/`

# \- \*\*Main App:\*\* `/home/wofl/fastping.it.com/fastping-it/ultimate\_fastping\_app.py`

# \- \*\*Docker Compose:\*\* `/home/wofl/fastping.it.com/fastping-it/docker-compose.yml`

# \- \*\*Nginx Config:\*\* `/home/wofl/fastping.it.com/fastping-it/nginx.conf`

# 

# \### In Container

# \- \*\*App File:\*\* `/app/ultimate\_fastping\_app.py`

# \- \*\*Database:\*\* `/app/fastping.db`

# \- \*\*Logs:\*\* `docker-compose logs fastping`

# 

# ---

# 

# \## üìû Quick Commands Cheat Sheet

# 

# ```bash

# \# SSH to server

# ssh wofl@161.35.248.233

# 

# \# Create customer + get API key

# curl -X POST http://localhost:9876/admin/create\_test\_customer -H "Content-Type: application/json" -d '{"email":"user@example.com","plan\_type":"enterprise"}'

# 

# \# Test API

# curl -H "Authorization: Bearer YOUR\_API\_KEY" http://161.35.248.233/api/v1/ping

# 

# \# Test proxy detection

# curl http://161.35.248.233/proxy-test

# 

# \# Check admin stats

# curl http://161.35.248.233/admin/stats

# 

# \# Restart service

# docker-compose restart fastping

# 

# \# View logs

# docker-compose logs fastping --tail 20

# 

# \# Check health

# curl http://161.35.248.233/health

# ```

# 

# ---

# 

# \## üé® Dashboard Features

# 

# \### Customer Dashboard Color Themes

# \- Automatically cycles through 8 beautiful themes every 45 seconds

# \- Themes: Blue Ocean, Purple Storm, Forest Green, Sunset Orange, Rose Pink, Ocean Teal, Cosmic Indigo, Fire Red

# \- Auto-refreshes data every 30 seconds

# 

# \### Available Dashboard Data

# \- Real-time usage statistics (last 7 days)

# \- Success rate and response times

# \- Whitelisted IP addresses

# \- API key management

# \- Daily usage breakdown

# \- Rate limits and quotas

# 

# ---

# 

# \*\*üöÄ That's your complete FastPing operations manual, husklyfren! Save this for reference!\*\* üíé
